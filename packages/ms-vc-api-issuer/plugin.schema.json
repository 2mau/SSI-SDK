{
  "IMsVcApiIssuer": {
    "components": {
      "schemas": {
        "FindClaimsArgs": {
          "$ref": "#/components/schemas/FindArgs-TClaimsColumns",
          "description": "The filter that can be used to find  {@link  VerifiableCredential } s in the data store, based on the types and values of their claims.\n\nSee  {@link  IDataStoreORM.dataStoreORMGetVerifiableCredentialsByClaims }"
        },
        "FindArgs-TClaimsColumns": {
          "type": "object",
          "properties": {
            "where": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Where-TClaimsColumns"
              },
              "description": "Imposes constraints on the values of the given columns. WHERE clauses are combined using AND."
            },
            "order": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Order-TClaimsColumns"
              },
              "description": "Sorts the results according to the given array of column priorities."
            },
            "skip": {
              "type": "number",
              "description": "Ignores the first number of entries in a  {@link  IDataStoreORM }  query result."
            },
            "take": {
              "type": "number",
              "description": "Returns at most this number of results from a  {@link  IDataStoreORM }  query."
            }
          },
          "description": "Represents an  {@link  IDataStoreORM }  Query."
        },
        "Where-TClaimsColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TClaimsColumns"
            },
            "value": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "not": {
              "type": "boolean"
            },
            "op": {
              "type": "string",
              "enum": [
                "LessThan",
                "LessThanOrEqual",
                "MoreThan",
                "MoreThanOrEqual",
                "Equal",
                "Like",
                "Between",
                "In",
                "Any",
                "IsNull"
              ]
            }
          },
          "required": [
            "column"
          ],
          "description": "Represents a WHERE predicate for a { @link IDataStoreORM.FindArgs } query. In situations where multiple WHERE predicates are present, they are combined with AND."
        },
        "TClaimsColumns": {
          "type": "string",
          "enum": [
            "context",
            "credentialType",
            "type",
            "value",
            "isObj",
            "id",
            "issuer",
            "subject",
            "expirationDate",
            "issuanceDate"
          ],
          "description": "The columns that can be searched for the claims of a  {@link  VerifiableCredential } \n\nSee  {@link  IDataStoreORM.dataStoreORMGetVerifiableCredentialsByClaims } \nSee  {@link  IDataStoreORM.dataStoreORMGetVerifiableCredentialsByClaimsCount }"
        },
        "Order-TClaimsColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TClaimsColumns"
            },
            "direction": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          "required": [
            "column",
            "direction"
          ],
          "description": "Represents the sort order of results from a { @link IDataStoreORM.FindArgs } query."
        },
        "UniqueVerifiableCredential": {
          "type": "object",
          "properties": {
            "hash": {
              "type": "string"
            },
            "verifiableCredential": {
              "$ref": "#/components/schemas/VerifiableCredential"
            }
          },
          "required": [
            "hash",
            "verifiableCredential"
          ],
          "description": "Represents the result of a Query for  {@link  VerifiableCredential } s\n\nSee  {@link  IDataStoreORM.dataStoreORMGetVerifiableCredentials } \nSee  {@link  IDataStoreORM.dataStoreORMGetVerifiableCredentialsByClaims }"
        },
        "VerifiableCredential": {
          "type": "object",
          "properties": {
            "proof": {
              "$ref": "#/components/schemas/ProofType"
            },
            "issuer": {
              "$ref": "#/components/schemas/IssuerType"
            },
            "credentialSubject": {
              "$ref": "#/components/schemas/CredentialSubject"
            },
            "type": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "@context": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "issuanceDate": {
              "type": "string"
            },
            "expirationDate": {
              "type": "string"
            },
            "credentialStatus": {
              "$ref": "#/components/schemas/CredentialStatus"
            },
            "id": {
              "type": "string"
            }
          },
          "required": [
            "@context",
            "credentialSubject",
            "issuanceDate",
            "issuer",
            "proof"
          ],
          "description": "Represents a signed Verifiable Credential payload (includes proof), using a JSON representation. See  {@link  https://www.w3.org/TR/vc-data-model/#credentials | VC data model }"
        },
        "ProofType": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            }
          },
          "description": "A proof property of a Verifiable Credential or Presentation"
        },
        "IssuerType": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ]
            },
            {
              "type": "string"
            }
          ],
          "description": "The issuer of a Credential or the holder of a Presentation.\n\nThe value of the issuer property MUST be either a URI or an object containing an id property. It is RECOMMENDED that the URI in the issuer or its id be one which, if de-referenced, results in a document containing machine-readable information about the issuer that can be used to verify the information expressed in the credential.\n\nSee  {@link  https://www.w3.org/TR/vc-data-model/#issuer | Issuer data model }"
        },
        "CredentialSubject": {
          "type": "object"
        },
        "CredentialStatus": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "description": "Used for the discovery of information about the current status of a verifiable credential, such as whether it is suspended or revoked. The precise contents of the credential status information is determined by the specific `credentialStatus` type definition, and varies depending on factors such as whether it is simple to implement or if it is privacy-enhancing.\n\nSee  {@link  https://www.w3.org/TR/vc-data-model/#status | Credential Status }"
        },
        "FindCredentialsArgs": {
          "$ref": "#/components/schemas/FindArgs-TCredentialColumns",
          "description": "The filter that can be used to find  {@link  VerifiableCredential } s in the data store. See  {@link  IDataStoreORM.dataStoreORMGetVerifiableCredentials }"
        },
        "FindArgs-TCredentialColumns": {
          "type": "object",
          "properties": {
            "where": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Where-TCredentialColumns"
              },
              "description": "Imposes constraints on the values of the given columns. WHERE clauses are combined using AND."
            },
            "order": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Order-TCredentialColumns"
              },
              "description": "Sorts the results according to the given array of column priorities."
            },
            "skip": {
              "type": "number",
              "description": "Ignores the first number of entries in a  {@link  IDataStoreORM }  query result."
            },
            "take": {
              "type": "number",
              "description": "Returns at most this number of results from a  {@link  IDataStoreORM }  query."
            }
          },
          "description": "Represents an  {@link  IDataStoreORM }  Query."
        },
        "Where-TCredentialColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TCredentialColumns"
            },
            "value": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "not": {
              "type": "boolean"
            },
            "op": {
              "type": "string",
              "enum": [
                "LessThan",
                "LessThanOrEqual",
                "MoreThan",
                "MoreThanOrEqual",
                "Equal",
                "Like",
                "Between",
                "In",
                "Any",
                "IsNull"
              ]
            }
          },
          "required": [
            "column"
          ],
          "description": "Represents a WHERE predicate for a { @link IDataStoreORM.FindArgs } query. In situations where multiple WHERE predicates are present, they are combined with AND."
        },
        "TCredentialColumns": {
          "type": "string",
          "enum": [
            "context",
            "type",
            "id",
            "issuer",
            "subject",
            "expirationDate",
            "issuanceDate"
          ],
          "description": "The columns that can be searched for a  {@link  VerifiableCredential } \n\nSee  {@link  IDataStoreORM.dataStoreORMGetVerifiableCredentials } \nSee  {@link  IDataStoreORM.dataStoreORMGetVerifiableCredentialsCount }"
        },
        "Order-TCredentialColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TCredentialColumns"
            },
            "direction": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          "required": [
            "column",
            "direction"
          ],
          "description": "Represents the sort order of results from a { @link IDataStoreORM.FindArgs } query."
        },
        "IDataStoreSaveVerifiableCredentialArgs": {
          "type": "object",
          "properties": {
            "verifiableCredential": {
              "$ref": "#/components/schemas/VerifiableCredential",
              "description": "Required. VerifiableCredential"
            }
          },
          "required": [
            "verifiableCredential"
          ],
          "description": "Input arguments for  {@link  IDataStore.dataStoreSaveVerifiableCredential | dataStoreSaveVerifiableCredential }"
        },
        "IIssueRequest": {
          "type": "object",
          "properties": {
            "authenticationInfo": {
              "$ref": "#/components/schemas/IMsAuthenticationClientCredentialArgs"
            },
            "issuanceConfig": {
              "$ref": "#/components/schemas/IssuanceConfig"
            }
          },
          "required": [
            "authenticationInfo",
            "issuanceConfig"
          ]
        },
        "IMsAuthenticationClientCredentialArgs": {
          "type": "object",
          "properties": {
            "azClientId": {
              "type": "string"
            },
            "azTenantId": {
              "type": "string"
            },
            "azClientSecret": {
              "type": "string"
            },
            "credentialManifestUrl": {
              "type": "string"
            },
            "authority": {
              "type": "string"
            },
            "region": {
              "type": "string"
            },
            "scopes": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "skipCache": {
              "type": "boolean"
            },
            "piiLoggingEnabled": {
              "type": "boolean"
            },
            "logLevel": {
              "$ref": "#/components/schemas/LogLevel"
            }
          },
          "required": [
            "azClientId",
            "azTenantId",
            "azClientSecret",
            "credentialManifestUrl"
          ],
          "description": "azClientId: clientId of the application you're trying to login azClientSecret: secret of the application you're trying to login azTenantId: your MS Azure tenantId credentialManifestUrl: url of your credential manifest. usually in following format:  https://beta.eu.did.msidentity.com/v1.0/<tenant_id>/verifiableCredential/contracts/<verifiable_credential_schema> authority: optional. if not provided, we'll use the azClientId to create the Tenanted format if provided should be one of these two formats:  - Tenanted: https://login.microsoftonline.com/{tenant}/, where {tenant} is either the GUID representing the tenant ID or a domain name associated with the tenant.  - Work and school accounts: https://login.microsoftonline.com/organizations/. region?: if present will use the provided, if not will make a request to determine the region scopes?: scopes that you want to access via this authentication skipCache?: whether to skip cache piiLoggingEnabled?: if not provided defaults to false logLevel?: can be one of these values:   Error = 0,   Warning = 1,   Info = 2,   Verbose = 3,   Trace = 4   if not provided defaults to LogLevel.Verbose"
        },
        "LogLevel": {
          "type": "number",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "description": "Log message level."
        },
        "IssuanceConfig": {
          "type": "object",
          "properties": {
            "authority": {
              "type": "string"
            },
            "includeQRCode": {
              "type": "boolean"
            },
            "registration": {
              "$ref": "#/components/schemas/Registration"
            },
            "callback": {
              "$ref": "#/components/schemas/Callback"
            },
            "issuance": {
              "$ref": "#/components/schemas/Issuance"
            }
          },
          "required": [
            "authority",
            "includeQRCode",
            "registration",
            "callback",
            "issuance"
          ]
        },
        "Registration": {
          "type": "object",
          "properties": {
            "clientName": {
              "type": "string"
            }
          },
          "required": [
            "clientName"
          ]
        },
        "Callback": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "headers": {
              "$ref": "#/components/schemas/Headers"
            }
          },
          "required": [
            "url",
            "state",
            "headers"
          ]
        },
        "Headers": {
          "type": "object",
          "properties": {
            "apiKey": {
              "type": "string"
            }
          },
          "required": [
            "apiKey"
          ]
        },
        "Issuance": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "manifest": {
              "type": "string"
            },
            "pin": {
              "$ref": "#/components/schemas/Pin"
            },
            "claims": {
              "$ref": "#/components/schemas/CredentialSubject"
            }
          },
          "required": [
            "type",
            "manifest",
            "pin",
            "claims"
          ]
        },
        "Pin": {
          "type": "object",
          "properties": {
            "value": {
              "type": "string"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "value",
            "length"
          ]
        },
        "IIssueRequestResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "requestId": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "expiry": {
              "type": "string",
              "format": "date-time"
            },
            "pin": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "requestId",
            "url",
            "expiry",
            "pin"
          ]
        }
      },
      "methods": {
        "dataStoreORMGetVerifiableCredentialsByClaims": {
          "description": "",
          "arguments": {
            "$ref": "#/components/schemas/FindClaimsArgs"
          },
          "returnType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueVerifiableCredential"
            }
          }
        },
        "dataStoreORMGetVerifiableCredentialsCount": {
          "description": "",
          "arguments": {
            "$ref": "#/components/schemas/FindCredentialsArgs"
          },
          "returnType": {
            "type": "number"
          }
        },
        "dataStoreSaveVerifiableCredential": {
          "description": "",
          "arguments": {
            "$ref": "#/components/schemas/IDataStoreSaveVerifiableCredentialArgs"
          },
          "returnType": {
            "type": "string"
          }
        },
        "issuanceRequestMsVc": {
          "description": "",
          "arguments": {
            "$ref": "#/components/schemas/IIssueRequest"
          },
          "returnType": {
            "$ref": "#/components/schemas/IIssueRequestResponse"
          }
        }
      }
    }
  }
}